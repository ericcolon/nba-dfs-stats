from pandas import * 
import pandasql
import numpy as np
import MySQLdb as mdb
import sys
import string
import pdb
import datetime

#Goalserve!!!!!!

Injuries_DATA = 'goalserve/injuries.csv'
Odds_DATA = 'goalserve/odds.csv'
Players_DATA = 'goalserve/players.csv'
Schedule_DATA = 'goalserve/schedule.csv'
Lineups_DATA= 'goalserve/nba_lineups.csv'

DB_HOST = '173.194.110.63'
DB_PORT = 3306
DB_USER = 'root'
DB_PWD = 'Jermann1'
DB_NAME = 'nbastats'

Team_Dict = {'OKC': 'Oklahoma City Thunder',
             'MIN': 'Minnesota Timberwolves',
             'UTA': 'Utah Jazz',
             'POR': 'Portland Trailblazers',
             'DEN': 'Denver Nuggets',
             'DAL': 'Dallas Mavericks',
             'NOP': 'New Orleans Pelicans',
             'MEM': 'Memphis Grizzlies',
             'SAS': 'San Antonio Spurs',
             'HOU': 'Houston Rockets',
             'LAC' : 'Los Angeles Clippers',
             'LAL': 'Los Angeles Lakers',
             'PHO': 'Phoenix Suns',
             'GSW': 'Golden State Warriors',
             'SAC': 'Sacramento Kings',
             'CHI': 'Chicago Bulls',
             'CLE': 'Cleveland Cavs',
             'MIL': 'Milwaukee Bucks',
             'IND': 'Indiana Pacers',
             'DET': 'Detroit Pistons',
             'CHA': 'Charlotte Bobcats',
             'ORL': 'Orlando Magic',
             'MIA': 'Miami Heat',
             'ATL': 'Atlanta Hawks',
             'WAS': 'Washington Wizards',
             'NYK': 'New York Knicks',
             'PHI': 'Philadelphia 76ers',
             'BOS': 'Boston Celtics',
             'BKN': 'Brooklyn Nets',
             'TOR': 'Toronto Raptors'}

def update_database(con, input_dataframe, table, drop=True, index=False):
    try:
        cur = con.cursor()
        if drop:
            drop_query = 'DROP TABLE IF EXISTS ' + table
            cur.execute(drop_query) 
            con.commit()
            if not index:
                input_dataframe.insert(0, 'ID', input_dataframe.index.tolist())
        input_dataframe.to_sql(table, con, 'mysql', if_exists='append', index=False)

    except mdb.Error, e:
        print "Error %d: %s" % (e.args[0], e.args[1])

def get_index(con, query):
    try:
        cur = con.cursor()
        cur.execute(query) 

    except mdb.Error, e:
        print "Error %d: %s" % (e.args[0], e.args[1])


def main():
    con = mdb.connect(host=DB_HOST,
                      port=DB_PORT,
                      user=DB_USER,
                      passwd=DB_PWD,
                      db=DB_NAME)

    cur = con.cursor()

    cur.execute('SELECT Date FROM Schedule')
    sunday = cur.fetchall()
    date = str(sunday[0]).split('(')[1].split(',')[0].replace("'", "")

    lineups = pandas.read_csv(Lineups_DATA)
    injuries = pandas.read_csv(Injuries_DATA)
    players = pandas.read_csv(Players_DATA)
    schedule = pandas.read_csv(Schedule_DATA)

    players = players[players['Active'] == True]
    players = merge(players, injuries, left_on='PlayerID', right_on='PlayerID', how='left')

    lineups_fields = ['PlayerName']
    players = merge(players, lineups, on='PlayerName', how='inner')
    players['Starting'] = 0

    exclude = set(string.punctuation)
    name_map = lambda name: ''.join(ch for ch in name if ch not in exclude)
    period_map = lambda name: name.replace('.','')

    players['PlayerName'] = players['PlayerName'].map(name_map)
    players['PlayerName'] = players['PlayerName'].map(period_map)
    players['TeamName'] = players['TeamName'].map(name_map)
    players['TeamName'] = players['TeamName'].map(period_map)

    #Schedule Table

    season = schedule
    schedule = schedule[schedule['Date'] == date]
    evening = schedule[schedule['Time'] >= '17:00']
    late = schedule[schedule['Time'] >= '20:00']
    primetime = schedule[schedule['Time'] >= '19:00']

    update_database(con, season, 'Season', drop=True, index=True)
    update_database(con, schedule, 'Schedule', drop=True, index=True)
    update_database(con, evening, 'Evening', drop=True, index=True)
    update_database(con, primetime, 'Primetime', drop=True, index=True)
    update_database(con, late, 'Late', drop=True, index=True)

    #Player Projections Table

    projections_fields = ['GameID',
                          'Date',
                          'Position',
                          'TeamID',
                          'TeamName',
                          'PlayerID',
                          'PlayerName',
                          'Status',
                          'Starting',
                          'BaseProj',
                          'OddsProj',
                          'OppProj',
                          'CombProj',
                          'SalaryProj',
                          'RotoProj']

    homeplayers = merge(players, schedule, left_on='TeamID', right_on='HomeTeamID', how='inner')
    awayplayers = merge(players, schedule, left_on='TeamID', right_on='AwayTeamID', how='inner')
    homeplayers['PlayerName'] = homeplayers['PlayerName'].map(name_map)
    homeplayers['BaseProj'] = None
    homeplayers['OddsProj'] = None
    homeplayers['OppProj'] = None
    homeplayers['CombProj'] = None
    homeplayers['SalaryProj'] = None
    homeplayers['RotoProj'] = None
    homeplayers = homeplayers[projections_fields]

    awayplayers['PlayerName'] = awayplayers['PlayerName'].map(name_map)
    awayplayers['BaseProj'] = None
    awayplayers['OddsProj'] = None
    awayplayers['OppProj'] = None
    awayplayers['CombProj'] = None
    awayplayers['SalaryProj'] = None
    awayplayers['RotoProj'] = None
    awayplayers = awayplayers[projections_fields]

    update_database(con, homeplayers, 'Projections', drop=True, index=True)
    update_database(con, awayplayers, 'Projections', drop=False, index=True)

    con.close()

if __name__ == "__main__":
    main()
